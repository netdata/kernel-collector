---
# Builds and Releases packages for eBPF to be consumed by NetData Agent
name: CD
on:
  push:
    tags:
      - 'v*'
jobs:
  build:
    name: Build
    strategy:
      matrix:
        kernel_version:
          - '5.4.20'
          - '4.16.18'
          - '4.18.0'
          - '4.14.171'
          - '3.10.0'
        libc:
          - glibc
          - musl
        exclude:
          # excludes musl on 4.18.0
          - kernel_version: 4.18.0
            libc: musl
          # excludes musl on 4.16.18
          - kernel_version: 4.16.18
            libc: musl
          # excludes musl on 3.10.0
          - kernel_version: 3.10.0
            libc: musl
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run build.sh
        run: |
          if [ ${{ matrix.kernel_version }} = "4.18.0" ]; then
            os=centos8
          elif [ ${{ matrix.kernel_version }} = "3.10.0" ]; then
            os=centos7
          else
            os=generic
          fi
          ./build.sh ${{ matrix.kernel_version }} ${{ matrix.libc }} "${os}"
      - name: List Artifacts
        run: |
          ls -lah artifacts
          test -f artifacts/netdata_ebpf-*.tar.xz
      - name: Upload Artifacts
        uses: actions/upload-artifact@v1
        if: success()
        with:
          name: artifacts-${{ matrix.kernel_version }}-${{ matrix.libc }}
          path: artifacts

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          # TODO: Generate ChagneLog here for Release Description
          body: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Write upload_url
        run: |
          mkdir -p upload_url
          echo '${{ steps.create_release.outputs.upload_url }}' > upload_url/upload_url.txt
      - name: Upload upload_url
        uses: actions/upload-artifact@v1
        with:
          name: upload_url
          path: upload_url

  upload:
    name: Upload
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Download upload_url
        uses: actions/download-artifact@v1
        with:
          name: upload_url
      - name: Set upload_url
        run: |
          echo "::set-env name=UPLOAD_URL::$(cat upload_url/upload_url.txt)"
      - name: Download all Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Display Artifacts
        run: ls -R
        working-directory: artifacts
      - name: Package Relase Assets
        run: |
          mkdir -p packages/netdata-kernel-collector-glibc-${GITHUB_REF##*/}
          mkdir -p packages/netdata-kernel-collector-musl-${GITHUB_REF##*/}
          for libc in glibc musl; do
            for dir in artifacts/artifacts-*-"$libc"; do
              tar -C packages/netdata-kernel-collector-"$libc"-${GITHUB_REF##*/} -xvf "$dir"/*.tar.xz
            done
          done
      - name: Display Assets
        run: ls -R
        working-directory: packages
  #      - name: Upload Release Asset ${{ steps.asset-filename.outputs.name }}
  #      uses: actions/upload-release-asset@v1
  #      env:
  #        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #      with:
  #        upload_url: ${{ env.UPLOAD_URL }}
  #        asset_path: artifacts-${{ matrix.kernel_version }}-${{ matrix.libc }}/${{ steps.asset-filename.outputs.name }}
  #        asset_name: ${{ steps.asset-filename.outputs.name }}
  #        asset_content_type: application/x-gtar
